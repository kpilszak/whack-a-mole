{"version":3,"sources":["components/Square.js","redux/actions.js","redux/actionTypes.js","components/GameBoard.js","redux/reducer.js","redux/store.js","App.js"],"names":["styles","StyleSheet","create","square","flex","minWidth","minHeight","margin","backgroundColor","mole","connect","state","score","dispatch","addScore","type","props","timerId","useState","moleActive","setMoleActive","isGameOver","setGameOver","randomTime","Math","random","endGame","clearInterval","useEffect","setInterval","setTimeout","TouchableOpacity","onPress","View","style","Text","container","alignItems","marginTop","game","flexDirection","flexWrap","width","paddingTop","timeLeft","setTimeLeft","initialState","scoreReducer","action","store","createStore","App"],"mappings":"gMAqCMA,EAASC,IAAWC,OAAO,CAC7BC,OAAQ,CACJC,KAAM,EACNC,SAAU,GACVC,UAAW,GACXC,OAAQ,GACRC,gBAAiB,OAErBC,KAAM,CACFL,KAAM,EACNC,SAAU,GACVC,UAAW,GACXC,OAAQ,GACRC,gBAAiB,UAgBVE,eAZS,SAAAC,GACpB,MAAO,CACHC,MAAOD,EAAMC,UAIM,SAAAC,GACvB,MAAO,CACHC,SAAU,kBAAMD,EC3Db,CACHE,KCJiB,kBFkEVL,EA7DA,SAACM,GAEZ,IAGIC,EAHJ,EAAoCC,oBAAS,GAA7C,WAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAkCF,oBAAS,GAA3C,WAAOG,EAAP,KAAmBC,EAAnB,KACMC,EAA6B,IAAhBC,KAAKC,SAaxB,SAASC,IACLC,cAAcV,GACdK,GAAY,GAGhB,OAfAM,qBAAU,WACNX,EAAUY,aAAY,WAClBT,GAAc,GACdU,YAAW,WACPV,GAAc,KACf,OACJG,GACHO,WAAWJ,EAAS,QACrB,IAQC,cAACK,EAAA,EAAD,CAAkBC,QAASb,EAAaH,EAAMF,SAAW,KAAzD,SACI,cAACmB,EAAA,EAAD,CAAMC,MAAOf,EAAanB,EAAOS,KAAOT,EAAOG,OAA/C,SACKkB,GAAc,cAACc,EAAA,EAAD,uBGWzBnC,EAASC,IAAWC,OAAO,CAC/BkC,UAAW,CACThC,KAAM,EACNI,gBAAiB,OACjB6B,WAAY,SACZC,UAAW,KAEbC,KAAM,CACJC,cAAe,MACfC,SAAU,OACVC,MAAO,IACPC,WAAY,MAUDjC,eANS,SAAAC,GACtB,MAAO,CACLC,MAAOD,EAAMC,SAIFF,EAzDG,SAACM,GACjB,MAAgCE,mBAAS,IAAzC,WAAO0B,EAAP,KAAiBC,EAAjB,KAYA,OAVAjB,qBAAU,WACR,GAAIgB,EAAJ,CAEA,IAAM3B,EAAUY,aAAY,WAC1BgB,EAAYD,EAAW,KACtB,KAEH,OAAO,kBAAMjB,cAAcV,OAC1B,CAAC2B,IAGF,eAACX,EAAA,EAAD,CAAMC,MAAOlC,EAAOoC,UAApB,UACE,cAACD,EAAA,EAAD,4BACA,cAACA,EAAA,EAAD,UAAOS,IACP,cAACT,EAAA,EAAD,UAAOnB,EAAMJ,QACb,eAACqB,EAAA,EAAD,CAAMC,MAAOlC,EAAOuC,KAApB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,a,0lBCjCR,IAAMO,EAAe,CACjBlC,MAAO,GAaImC,EAVM,WAAmC,IAAlCpC,EAAiC,uDAAzBmC,EAAcE,EAAW,uCACnD,OAAOA,EAAOjC,MACV,IFRiB,YEQD,OAAO,EAAP,KACTJ,GADS,IAEZC,MAAOD,EAAMC,MAAQ,IAEzB,QAAS,OAAOD,ICPTsC,EAFDC,YAAYH,GCEX,SAASI,IACtB,OACE,cAAC,IAAD,CAAUF,MAAOA,EAAjB,SACE,cAAC,EAAD,Q","file":"static/js/app.c96f2dee.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { View, StyleSheet, Text, TouchableOpacity } from 'react-native'\r\nimport { addScore } from './../redux'\r\nimport { connect } from 'react-redux'\r\n\r\nconst Square = (props) => {\r\n\r\n    const [moleActive, setMoleActive] = useState(false)\r\n    const [isGameOver, setGameOver] = useState(false)\r\n    const randomTime = Math.random() * 20000\r\n    let timerId\r\n\r\n    useEffect(() => {\r\n        timerId = setInterval(() => {\r\n            setMoleActive(true)\r\n            setTimeout(() => {\r\n                setMoleActive(false)\r\n            }, 800)\r\n        }, randomTime)\r\n        setTimeout(endGame, 11 * 1000)\r\n    }, [])\r\n\r\n    function endGame() {\r\n        clearInterval(timerId)\r\n        setGameOver(true)\r\n    }\r\n\r\n    return (\r\n        <TouchableOpacity onPress={moleActive ? props.addScore : null}>\r\n            <View style={moleActive ? styles.mole : styles.square}>\r\n                {isGameOver && <Text>X</Text>}\r\n            </View>\r\n        </TouchableOpacity>\r\n    )\r\n\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    square: {\r\n        flex: 1,\r\n        minWidth: 80,\r\n        minHeight: 80,\r\n        margin: 10,\r\n        backgroundColor: 'red',\r\n    },\r\n    mole: {\r\n        flex: 1,\r\n        minWidth: 80,\r\n        minHeight: 80,\r\n        margin: 10,\r\n        backgroundColor: 'blue',\r\n    }\r\n})\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        score: state.score\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addScore: () => dispatch(addScore())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Square)","import { ADD_SCORE } from './actionTypes'\r\n\r\nexport const addScore = () => {\r\n    return {\r\n        type: ADD_SCORE\r\n    }\r\n}","export const ADD_SCORE = 'ADD_SCORE'","import React, { useState, useEffect } from 'react'\r\nimport { StyleSheet, Text, View } from 'react-native'\r\nimport Square from './Square.js'\r\nimport { connect } from 'react-redux'\r\n\r\nconst GameBoard = (props) => {\r\n  const [timeLeft, setTimeLeft] = useState(11)\r\n\r\n  useEffect(() => {\r\n    if(!timeLeft) return\r\n\r\n    const timerId = setInterval(() => {\r\n      setTimeLeft(timeLeft - 1)\r\n    }, 1000)\r\n\r\n    return () => clearInterval(timerId)\r\n  }, [timeLeft]) \r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text>Whack A Mole!</Text>\r\n      <Text>{timeLeft}</Text>\r\n      <Text>{props.score}</Text>\r\n      <View style={styles.game}>\r\n        <Square></Square>\r\n        <Square></Square>\r\n        <Square></Square>\r\n        <Square></Square>\r\n        <Square></Square>\r\n        <Square></Square>\r\n        <Square></Square>\r\n        <Square></Square>\r\n        <Square></Square>\r\n        <Square></Square>\r\n        <Square></Square>\r\n        <Square></Square>\r\n      </View>\r\n    </View>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    marginTop: 100\r\n  },\r\n  game: {\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    width: 300,\r\n    paddingTop: 20,\r\n  },\r\n})\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    score: state.score\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(GameBoard)\r\n","import { ADD_SCORE } from './actionTypes'\r\n\r\nconst initialState = {\r\n    score: 0\r\n}\r\n\r\nconst scoreReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case ADD_SCORE: return {\r\n            ...state,\r\n            score: state.score + 1\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default scoreReducer","import { createStore } from 'redux'\r\nimport scoreReducer from './reducer'\r\n\r\nconst store = createStore(scoreReducer)\r\n\r\nexport default store","import React from 'react'\nimport GameBoard from './components/GameBoard.js'\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <GameBoard />\n    </Provider>\n  );\n}\n"],"sourceRoot":""}